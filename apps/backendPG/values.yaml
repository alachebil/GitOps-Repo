# Default values for backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: 192.168.1.192:8082/tp-foyer
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "5.0.0"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:
  - name: nexus-registry-secret

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: NodePort
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8089
  nodePort: 30089

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

database:
  host: ha-postgres-2-pooler #database.svc.cluster.local in case of change namespace
  port: 5432
  name: myapp
  username: postgres
  # Password will be set from secret

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi


# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: 
  kubernetes.io/hostname: k8s-worker2

tolerations: []

affinity: {}


env:
  - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://{{ .Values.database.host }}:{{ .Values.database.port }}/{{ .Values.database.name }}?connectTimeout=5&socketTimeout=10&tcpKeepAlive=true&prepareThreshold=0
              #value: jdbc:postgresql://{{ .Values.database.host }}:{{ .Values.database.port }}/{{ .Values.database.name }}?targetServerType=primary&connectTimeout=5&socketTimeout=10&tcpKeepAlive=true
            - name: SPRING_DATASOURCE_USERNAME
              value: {{ .Values.database.username }}
            - name: SPRING_DATASOURCE_PASSWORD
              value: "iZ5jv14pHtZKafCpp5uKl3w3vbDxhdlpQBFK9R1zQTN3gR6OuV8QuD61OCipu6Z6"
              #valueFrom:
                #secretKeyRef:
                  #name: {{ include "my-spring-app.fullname" . }}
                  #key: database-password
            - name: SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT
              value: "30000"
            - name: SPRING_DATASOURCE_HIKARI_MAX_LIFETIME
              value: "300000"
            - name: SPRING_DATASOURCE_HIKARI_VALIDATION_TIMEOUT
              value: "5000"
            - name: SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE
              value: "5"  # minimum idle connections to keep ready
            - name: SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE  
              value: "20" # max connections, adjust per load


